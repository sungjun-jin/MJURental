subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'maven-publish'

    android {
        compileOptions.encoding = "UTF-8"
        version = "${rootProject.version}${rootProject.versionNameSuffix}"
        compileSdkVersion ANDROID_BUILD_SDK_VERSION
        buildToolsVersion ANDROID_BUILD_TOOL_VERSION
        group KAKAO_SDK_GROUP

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
        }

        defaultConfig {
            minSdkVersion ANDROID_BUILD_MIN_SDK_VERSION
            targetSdkVersion ANDROID_BUILD_TARGET_SDK_VERSION
            versionCode rootProject.versionCode
            versionName rootProject.version
        }

        buildTypes {
            release {
                debuggable false
                minifyEnabled false
            }

            debug {
                debuggable true
                minifyEnabled false
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }
        lintOptions {
            abortOnError false
        }
        ext.dependencyFlavors = [:]
    }

//    android.productFlavors.findAll { it.dimension == 'phase'}.each { phase ->
//        task "publish${phase.name.capitalize()}" // define publish tasks for each server phase dimension
//        task "test${phase.name.capitalize()}" // define test tasks for each server phase dimension
//    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.1.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
        // 이 라인을 추가하지 않으면 gradle wrapper 가 jupiter test를 찾지 못한다. (gradle 4.10 기준)
    }
}

configure(subprojects - project(':libraries:test-common')) {
    dependencies {
        testImplementation project(':libraries:test-common')
        testImplementation "junit:junit:$JUNIT_VERSION"
        testImplementation 'androidx.test:core:1.2.0'
        testImplementation "org.robolectric:robolectric:$ROBOLECTRIC_VERSION"
        testImplementation "org.robolectric:shadows-support-v4:$ROBOLECTRIC_SHADOW_VERSION"
        testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            variant.preBuildProvider.get().dependsOn rootProject.bumpVersionInProperties
            configurePublishProperties(variant)

            variant.assembleProvider.get().dependsOn "test${variant.name.capitalize()}UnitTest"
            variant.assembleProvider.get().doLast {
                println "\n============================================================"
                println "artifact id : ${project.name}${variant.artifactIdSuffix}"
                println "artifact version : $project.version"
                println "============================================================\n"
            }
        }
    }

    preBuild.dependsOn rootProject.bumpVersionInProperties
}

apply from: "$rootDir/libraries/publish.gradle"
apply from: "$rootDir/libraries/javadoc.gradle"